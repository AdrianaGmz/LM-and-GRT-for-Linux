Some present errors and the way I solved them:

/realtimeLMinGRT/build $ make
Scanning dependencies of target mainAll
[ 33%] Building CXX object CMakeFiles/mainAll.dir/home/adriana/Documents/Dropbox/AsusLMDE/realtimeLMinGRT/code/mainLM.cpp.o
In file included from /home/adriana/Documents/grt/GRT/Util/GRTCommon.h:50:0,
                 from /home/adriana/Documents/grt/GRT/GRT.h:51,
                 from /home/adriana/Documents/Dropbox/AsusLMDE/realtimeLMinGRT/code/mainLM.cpp:21:
/home/adriana/Documents/grt/GRT/Util/GRTTypedefs.h:31:16: error: expected unqualified-id before numeric constant
     #define PI 3.14159265358979323846264338327950288
                ^
/home/adriana/Documents/Dropbox/AsusLMDE/realtimeLMinGRT/build/../include/LeapMath.h:24:20: note: in expansion of macro ‘PI’
 static const float PI          = 3.1415926536f;
                    ^
make[2]: *** [CMakeFiles/mainAll.dir/home/adriana/Documents/Dropbox/AsusLMDE/realtimeLMinGRT/code/mainLM.cpp.o] Error 1
make[1]: *** [CMakeFiles/mainAll.dir/all] Error 2
make: *** [all] Error 2

That is because   LM library and GRT Library define in a different way the number PI

Since  LeapMath.h is not used in this application, in /include/LeapMath.h  I modified

		static const float PI          = 3.1415926536f;

and instead:

		#define PI 3.14159265358979323846264338327950288

commented lines.


*****************************************************************************************

in mainLM.cpp

	//Along with some other results such as the F-Measure, Precision and Recall
	double fMeasure = pipeline.getTestFMeasure();		//it says it can not convert
	double precision = pipeline.getTestPrecision();
	double recall = pipeline.getTestRecall();

the compiler throws:

realtimeLMinGRT/build $ make
Scanning dependencies of target mainAll
/realtimeLMinGRT/code/mainLM.cpp:164:45: error: cannot convert ‘GRT::VectorDouble {aka std::vector<double>}’ to ‘double’ in initialization
  double fMeasure = pipeline.getTestFMeasure();
                                             ^
realtimeLMinGRT/code/mainLM.cpp:165:47: error: cannot convert ‘GRT::VectorDouble {aka std::vector<double>}’ to ‘double’ in initialization
  double precision = pipeline.getTestPrecision();
                                               ^
realtimeLMinGRT/code/mainLM.cpp:166:41: error: cannot convert ‘GRT::VectorDouble {aka std::vector<double>}’ to ‘double’ in initialization
  double recall = pipeline.getTestRecall();
                                         ^
make[2]: *** [CMakeFiles/mainAll.dir/home/adriana/Documents/Dropbox/AsusLMDE/realtimeLMinGRT/code/mainLM.cpp.o] Error 1
make[1]: *** [CMakeFiles/mainAll.dir/all] Error 2
make: *** [all] Error 2

So I don't use them by now

*****************************************************************************************
Now, error shows>
/realtimeLMinGRT/build $ ./mainAll 
Loading dataset...
Data Loaded!
DatasetName:	NOT_SET
DatasetInfo:	
Number of Dimensions:	4
Number of Samples:	105
Number of Classes:	2
ClassStats:
ClassLabel:	1	Number of Samples:	89	ClassName:	NOT_SET
ClassLabel:	2	Number of Samples:	16	ClassName:	NOT_SET
Dataset Ranges:
[1] Min:	31.722	Max: 84.4332
[2] Min:	9.55765	Max: 100.383
[3] Min:	16.0026	Max: 73.2542
[4] Min:	12.3846	Max: 53.9747
Splitting data into training/test split...
Training model...
[ERROR MovingAverageFilter] process(const VectorDouble &inputVector) - The size of the inputVector (4) does not match that of the filter (1)!
[ERROR GRP] train(ClassificationData trainingData) - Failed to PreProcess Training Data. PreProcessingModuleIndex: 0
ERROR: Failed to train the pipeline!

Problem is in lines

	//Add a moving average filter (with a buffer size of 5 and for a 1 dimensional signal) as a pre-processing module
	pipeline.addPreProcessingModule( MovingAverageFilter(5,1) );
	...

	//Add a class label timeout filter to the end of the pipeline (with a timeout value of 1 second),
	//this will filter the predicted class output from the ANBC algorithm
	pipeline.addPostProcessingModule( ClassLabelTimeoutFilter(1000) );

Commented by now.

After this, project is reading data and classifying

*****************************************************************************************
