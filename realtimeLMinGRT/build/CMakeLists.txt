#cmake generated by dagr. Originally taken from GRT, modified to link the Linux LM libraries depending if they are 32bits or 64bits
cmake_minimum_required(VERSION 2.8)
project(LM_AND_GRT_PROJECT_EXAMPLE C CXX)


###   Add the main GRT library
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
find_package(grt REQUIRED)
include_directories(${GRT_INCLUDE_DIRS})	# -I flags for compiler


###  Add the main LM library
include_directories(${CMAKE_SOURCE_DIR}/../include) # -I flags for compiler
link_directories(${CMAKE_SOURCE_DIR}/../lib)        # -L flags for linker
# Test Linux Architecture to deliver the right LM library
# if Windows is desired, add another case:  http://stackoverflow.com/questions/17126860/cmake-link-precompiled-library-depending-on-os-and-architecture
if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    if (${CMAKE_SIZEOF_VOID_P} MATCHES "8")
        set(LM_LIBRARIES ${CMAKE_SOURCE_DIR}/../lib/x64/libLeap.so)
        #target_link_libraries(Test lib1_linux64)
    else()
		set(LM_LIBRARIES ${CMAKE_SOURCE_DIR}/../lib/x86/libLeap.so)
        #target_link_libraries(Test lib1_linux32)
    endif()
endif()


set(LIBS ${LIBS} ${GRT_LIBRARIES} ${LM_LIBRARIES})	# define variable  LIBS for linking



#Add any custom OS definitions
if(MSVC)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()
 
###   Add the custom files to be compiled, define the location variables
set(CMAKE_CODEPROG_PATH ${CMAKE_CODEPROG_PATH} "${CMAKE_SOURCE_DIR}/../code/")
set(PROGSRC ${CMAKE_CODEPROG_PATH}/mainLM.cpp ${CMAKE_CODEPROG_PATH}/grtANBC.cpp ${CMAKE_CODEPROG_PATH}/LMListener.cpp)
add_executable (mainAll ${PROGSRC})    # define executable target prog, specify sources

#set(PROGSRC grtANBC.cpp LMListener.cpp)      # define variable 
#add_executable(mainAll mainLM.cpp ${PROGSRC})    # define executable target prog, specify sources

###  Link the custom application against the libraries defined in LIBS (GRT and LM)
target_link_libraries (mainAll ${LIBS})

